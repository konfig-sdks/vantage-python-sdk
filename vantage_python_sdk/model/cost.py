# coding: utf-8

"""
    Vantage

    Vantage API

    The version of the OpenAPI document: 2.0.0
    Contact: support@vantage.sh
    Created by: https://www.vantage.sh
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vantage_python_sdk import schemas  # noqa: F401


class Cost(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['CostTags']:
                return CostTags
            links = schemas.DictSchema
            accrued_at = schemas.StrSchema
            amount = schemas.StrSchema
            currency = schemas.StrSchema
            
            
            class provider(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "aws": "AWS",
                        "azure": "AZURE",
                        "gcp": "GCP",
                        "snowflake": "SNOWFLAKE",
                        "databricks": "DATABRICKS",
                        "mongo": "MONGO",
                        "datadog": "DATADOG",
                        "fastly": "FASTLY",
                        "new_relic": "NEW_RELIC",
                        "opencost": "OPENCOST",
                        "open_ai": "OPEN_AI",
                        "oracle": "ORACLE",
                        "confluent": "CONFLUENT",
                        "planetscale": "PLANETSCALE",
                        "coralogix": "CORALOGIX",
                        "kubernetes": "KUBERNETES",
                    }
                
                @schemas.classproperty
                def AWS(cls):
                    return cls("aws")
                
                @schemas.classproperty
                def AZURE(cls):
                    return cls("azure")
                
                @schemas.classproperty
                def GCP(cls):
                    return cls("gcp")
                
                @schemas.classproperty
                def SNOWFLAKE(cls):
                    return cls("snowflake")
                
                @schemas.classproperty
                def DATABRICKS(cls):
                    return cls("databricks")
                
                @schemas.classproperty
                def MONGO(cls):
                    return cls("mongo")
                
                @schemas.classproperty
                def DATADOG(cls):
                    return cls("datadog")
                
                @schemas.classproperty
                def FASTLY(cls):
                    return cls("fastly")
                
                @schemas.classproperty
                def NEW_RELIC(cls):
                    return cls("new_relic")
                
                @schemas.classproperty
                def OPENCOST(cls):
                    return cls("opencost")
                
                @schemas.classproperty
                def OPEN_AI(cls):
                    return cls("open_ai")
                
                @schemas.classproperty
                def ORACLE(cls):
                    return cls("oracle")
                
                @schemas.classproperty
                def CONFLUENT(cls):
                    return cls("confluent")
                
                @schemas.classproperty
                def PLANETSCALE(cls):
                    return cls("planetscale")
                
                @schemas.classproperty
                def CORALOGIX(cls):
                    return cls("coralogix")
                
                @schemas.classproperty
                def KUBERNETES(cls):
                    return cls("kubernetes")
            billing_account_id = schemas.StrSchema
            account_id = schemas.StrSchema
            service = schemas.StrSchema
            region = schemas.StrSchema
            resource_id = schemas.StrSchema
            tag = schemas.StrSchema
            cost_category = schemas.StrSchema
            cost_subcategory = schemas.StrSchema
            __annotations__ = {
                "tags": tags,
                "links": links,
                "accrued_at": accrued_at,
                "amount": amount,
                "currency": currency,
                "provider": provider,
                "billing_account_id": billing_account_id,
                "account_id": account_id,
                "service": service,
                "region": region,
                "resource_id": resource_id,
                "tag": tag,
                "cost_category": cost_category,
                "cost_subcategory": cost_subcategory,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'CostTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrued_at"]) -> MetaOapg.properties.accrued_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_account_id"]) -> MetaOapg.properties.billing_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> MetaOapg.properties.service: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_id"]) -> MetaOapg.properties.resource_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_category"]) -> MetaOapg.properties.cost_category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_subcategory"]) -> MetaOapg.properties.cost_subcategory: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "links", "accrued_at", "amount", "currency", "provider", "billing_account_id", "account_id", "service", "region", "resource_id", "tag", "cost_category", "cost_subcategory", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['CostTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrued_at"]) -> typing.Union[MetaOapg.properties.accrued_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union[MetaOapg.properties.provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_account_id"]) -> typing.Union[MetaOapg.properties.billing_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> typing.Union[MetaOapg.properties.service, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_id"]) -> typing.Union[MetaOapg.properties.resource_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_category"]) -> typing.Union[MetaOapg.properties.cost_category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_subcategory"]) -> typing.Union[MetaOapg.properties.cost_subcategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "links", "accrued_at", "amount", "currency", "provider", "billing_account_id", "account_id", "service", "region", "resource_id", "tag", "cost_category", "cost_subcategory", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['CostTags', schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        accrued_at: typing.Union[MetaOapg.properties.accrued_at, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        provider: typing.Union[MetaOapg.properties.provider, str, schemas.Unset] = schemas.unset,
        billing_account_id: typing.Union[MetaOapg.properties.billing_account_id, str, schemas.Unset] = schemas.unset,
        account_id: typing.Union[MetaOapg.properties.account_id, str, schemas.Unset] = schemas.unset,
        service: typing.Union[MetaOapg.properties.service, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        resource_id: typing.Union[MetaOapg.properties.resource_id, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        cost_category: typing.Union[MetaOapg.properties.cost_category, str, schemas.Unset] = schemas.unset,
        cost_subcategory: typing.Union[MetaOapg.properties.cost_subcategory, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Cost':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            links=links,
            accrued_at=accrued_at,
            amount=amount,
            currency=currency,
            provider=provider,
            billing_account_id=billing_account_id,
            account_id=account_id,
            service=service,
            region=region,
            resource_id=resource_id,
            tag=tag,
            cost_category=cost_category,
            cost_subcategory=cost_subcategory,
            _configuration=_configuration,
            **kwargs,
        )

from vantage_python_sdk.model.cost_tags import CostTags
