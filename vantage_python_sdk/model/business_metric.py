# coding: utf-8

"""
    Vantage

    Vantage API

    The version of the OpenAPI document: 2.0.0
    Contact: support@vantage.sh
    Created by: https://www.vantage.sh
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vantage_python_sdk import schemas  # noqa: F401


class BusinessMetric(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    BusinessMetric model
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            token = schemas.StrSchema
            created_by_token = schemas.StrSchema
        
            @staticmethod
            def cost_report_tokens_with_metadata() -> typing.Type['BusinessMetricCostReportTokensWithMetadata']:
                return BusinessMetricCostReportTokensWithMetadata
        
            @staticmethod
            def values() -> typing.Type['BusinessMetricValues']:
                return BusinessMetricValues
            __annotations__ = {
                "title": title,
                "token": token,
                "created_by_token": created_by_token,
                "cost_report_tokens_with_metadata": cost_report_tokens_with_metadata,
                "values": values,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by_token"]) -> MetaOapg.properties.created_by_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_report_tokens_with_metadata"]) -> 'BusinessMetricCostReportTokensWithMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> 'BusinessMetricValues': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "token", "created_by_token", "cost_report_tokens_with_metadata", "values", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by_token"]) -> typing.Union[MetaOapg.properties.created_by_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_report_tokens_with_metadata"]) -> typing.Union['BusinessMetricCostReportTokensWithMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> typing.Union['BusinessMetricValues', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "token", "created_by_token", "cost_report_tokens_with_metadata", "values", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        created_by_token: typing.Union[MetaOapg.properties.created_by_token, str, schemas.Unset] = schemas.unset,
        cost_report_tokens_with_metadata: typing.Union['BusinessMetricCostReportTokensWithMetadata', schemas.Unset] = schemas.unset,
        values: typing.Union['BusinessMetricValues', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BusinessMetric':
        return super().__new__(
            cls,
            *args,
            title=title,
            token=token,
            created_by_token=created_by_token,
            cost_report_tokens_with_metadata=cost_report_tokens_with_metadata,
            values=values,
            _configuration=_configuration,
            **kwargs,
        )

from vantage_python_sdk.model.business_metric_cost_report_tokens_with_metadata import BusinessMetricCostReportTokensWithMetadata
from vantage_python_sdk.model.business_metric_values import BusinessMetricValues
