# coding: utf-8

"""
    Vantage

    Vantage API

    The version of the OpenAPI document: 2.0.0
    Contact: support@vantage.sh
    Created by: https://www.vantage.sh
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vantage_python_sdk import schemas  # noqa: F401


class CostReport(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    CostReport model
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            token = schemas.StrSchema
            folder_token = schemas.StrSchema
        
            @staticmethod
            def saved_filter_tokens() -> typing.Type['CostReportSavedFilterTokens']:
                return CostReportSavedFilterTokens
        
            @staticmethod
            def business_metric_tokens_with_metadata() -> typing.Type['CostReportBusinessMetricTokensWithMetadata']:
                return CostReportBusinessMetricTokensWithMetadata
            filter = schemas.StrSchema
            groupings = schemas.StrSchema
        
            @staticmethod
            def settings() -> typing.Type['CostReportSettings']:
                return CostReportSettings
            created_at = schemas.StrSchema
            workspace_token = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "token": token,
                "folder_token": folder_token,
                "saved_filter_tokens": saved_filter_tokens,
                "business_metric_tokens_with_metadata": business_metric_tokens_with_metadata,
                "filter": filter,
                "groupings": groupings,
                "settings": settings,
                "created_at": created_at,
                "workspace_token": workspace_token,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_token"]) -> MetaOapg.properties.folder_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saved_filter_tokens"]) -> 'CostReportSavedFilterTokens': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business_metric_tokens_with_metadata"]) -> 'CostReportBusinessMetricTokensWithMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupings"]) -> MetaOapg.properties.groupings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'CostReportSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspace_token"]) -> MetaOapg.properties.workspace_token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "token", "folder_token", "saved_filter_tokens", "business_metric_tokens_with_metadata", "filter", "groupings", "settings", "created_at", "workspace_token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_token"]) -> typing.Union[MetaOapg.properties.folder_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saved_filter_tokens"]) -> typing.Union['CostReportSavedFilterTokens', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business_metric_tokens_with_metadata"]) -> typing.Union['CostReportBusinessMetricTokensWithMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union[MetaOapg.properties.filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupings"]) -> typing.Union[MetaOapg.properties.groupings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union['CostReportSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspace_token"]) -> typing.Union[MetaOapg.properties.workspace_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "token", "folder_token", "saved_filter_tokens", "business_metric_tokens_with_metadata", "filter", "groupings", "settings", "created_at", "workspace_token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        folder_token: typing.Union[MetaOapg.properties.folder_token, str, schemas.Unset] = schemas.unset,
        saved_filter_tokens: typing.Union['CostReportSavedFilterTokens', schemas.Unset] = schemas.unset,
        business_metric_tokens_with_metadata: typing.Union['CostReportBusinessMetricTokensWithMetadata', schemas.Unset] = schemas.unset,
        filter: typing.Union[MetaOapg.properties.filter, str, schemas.Unset] = schemas.unset,
        groupings: typing.Union[MetaOapg.properties.groupings, str, schemas.Unset] = schemas.unset,
        settings: typing.Union['CostReportSettings', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        workspace_token: typing.Union[MetaOapg.properties.workspace_token, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostReport':
        return super().__new__(
            cls,
            *args,
            title=title,
            token=token,
            folder_token=folder_token,
            saved_filter_tokens=saved_filter_tokens,
            business_metric_tokens_with_metadata=business_metric_tokens_with_metadata,
            filter=filter,
            groupings=groupings,
            settings=settings,
            created_at=created_at,
            workspace_token=workspace_token,
            _configuration=_configuration,
            **kwargs,
        )

from vantage_python_sdk.model.cost_report_business_metric_tokens_with_metadata import CostReportBusinessMetricTokensWithMetadata
from vantage_python_sdk.model.cost_report_saved_filter_tokens import CostReportSavedFilterTokens
from vantage_python_sdk.model.cost_report_settings import CostReportSettings
