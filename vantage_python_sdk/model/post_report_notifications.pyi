# coding: utf-8

"""
    Vantage

    Vantage API

    The version of the OpenAPI document: 2.0.0
    Contact: support@vantage.sh
    Created by: https://www.vantage.sh
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vantage_python_sdk import schemas  # noqa: F401


class PostReportNotifications(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Create a ReportNotification.
    """


    class MetaOapg:
        required = {
            "change",
            "title",
            "cost_report_token",
            "frequency",
        }
        
        class properties:
            title = schemas.StrSchema
            cost_report_token = schemas.StrSchema
            frequency = schemas.StrSchema
            change = schemas.StrSchema
            workspace_token = schemas.StrSchema
        
            @staticmethod
            def user_tokens() -> typing.Type['PostReportNotificationsUserTokens']:
                return PostReportNotificationsUserTokens
        
            @staticmethod
            def recipient_channels() -> typing.Type['PostReportNotificationsRecipientChannels']:
                return PostReportNotificationsRecipientChannels
            __annotations__ = {
                "title": title,
                "cost_report_token": cost_report_token,
                "frequency": frequency,
                "change": change,
                "workspace_token": workspace_token,
                "user_tokens": user_tokens,
                "recipient_channels": recipient_channels,
            }
    
    change: MetaOapg.properties.change
    title: MetaOapg.properties.title
    cost_report_token: MetaOapg.properties.cost_report_token
    frequency: MetaOapg.properties.frequency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_report_token"]) -> MetaOapg.properties.cost_report_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["change"]) -> MetaOapg.properties.change: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspace_token"]) -> MetaOapg.properties.workspace_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_tokens"]) -> 'PostReportNotificationsUserTokens': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient_channels"]) -> 'PostReportNotificationsRecipientChannels': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "cost_report_token", "frequency", "change", "workspace_token", "user_tokens", "recipient_channels", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_report_token"]) -> MetaOapg.properties.cost_report_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["change"]) -> MetaOapg.properties.change: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspace_token"]) -> typing.Union[MetaOapg.properties.workspace_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_tokens"]) -> typing.Union['PostReportNotificationsUserTokens', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient_channels"]) -> typing.Union['PostReportNotificationsRecipientChannels', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "cost_report_token", "frequency", "change", "workspace_token", "user_tokens", "recipient_channels", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        change: typing.Union[MetaOapg.properties.change, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        cost_report_token: typing.Union[MetaOapg.properties.cost_report_token, str, ],
        frequency: typing.Union[MetaOapg.properties.frequency, str, ],
        workspace_token: typing.Union[MetaOapg.properties.workspace_token, str, schemas.Unset] = schemas.unset,
        user_tokens: typing.Union['PostReportNotificationsUserTokens', schemas.Unset] = schemas.unset,
        recipient_channels: typing.Union['PostReportNotificationsRecipientChannels', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostReportNotifications':
        return super().__new__(
            cls,
            *args,
            change=change,
            title=title,
            cost_report_token=cost_report_token,
            frequency=frequency,
            workspace_token=workspace_token,
            user_tokens=user_tokens,
            recipient_channels=recipient_channels,
            _configuration=_configuration,
            **kwargs,
        )

from vantage_python_sdk.model.post_report_notifications_recipient_channels import PostReportNotificationsRecipientChannels
from vantage_python_sdk.model.post_report_notifications_user_tokens import PostReportNotificationsUserTokens
